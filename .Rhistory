score_response <- function(model_name, item_id) {
read.csv("mmlu_pro/leaderboard_mmlu_pro_response_matrix_math.csv")[model_name,item_id]
}
print(score_response("qingy2024/Benchmaxx-Llama-3.2-1B-Instruct", "7504"))
score_response <- function(model_name, item_id) {
return(read.csv("mmlu_pro/leaderboard_mmlu_pro_response_matrix_math.csv")[model_name,item_id])
}
print(score_response("qingy2024/Benchmaxx-Llama-3.2-1B-Instruct", "7504"))
head(read.csv("mmlu_pro/leaderboard_mmlu_pro_response_matrix_math.csv"))
score_response <- function(model_name, item_id) {
return(read.csv("mmlu_pro/leaderboard_mmlu_pro_response_matrix_math.csv")[model_name,item_id])
}
print(score_response("qingy2024/Benchmaxx-Llama-3.2-1B-Instruct", "X7504"))
score_response <- function(model_name, item_id) {
  # Read the data once
  response_data <- read.csv("mmlu_pro/leaderboard_mmlu_pro_response_matrix_math.csv", stringsAsFactors = FALSE, check.names = FALSE)
  
  # Find the row index for the model
  row_idx <- which(response_data$X == model_name)
  
  # Return the value at the intersection of model_name row and item_id column
  if (length(row_idx) > 0 && item_id %in% colnames(response_data)) {
    return(response_data[row_idx, item_id])
  } else {
    warning(paste("Could not find data for model", model_name, "and item", item_id))
    return(NA)
  }
}

# Test the function
print("Testing score_response function:")
print(score_response("qingy2024/Benchmaxx-Llama-3.2-1B-Instruct", "X7504"))
score_response <- function(model_name, item_id) {
  # Read the data once
  response_data <- read.csv("mmlu_pro/leaderboard_mmlu_pro_response_matrix_math.csv", stringsAsFactors = FALSE, check.names = FALSE)
  
  # Find the row index for the model
  row_idx <- which(response_data$X == model_name)
  
  # Remove X prefix from item_id if it exists
  item_number <- gsub("^X", "", item_id)
  
  # Return the value at the intersection of model_name row and item_number column
  if (length(row_idx) > 0 && item_number %in% colnames(response_data)) {
    return(response_data[row_idx, item_number])
  } else {
    warning(paste("Could not find data for model", model_name, "and item", item_id, "/", item_number))
    return(NA)
  }
}

# Test the function
print("Testing score_response function:")
print(score_response("qingy2024/Benchmaxx-Llama-3.2-1B-Instruct", "X7504"))
print("First few models in the dataset:")
head_models <- head(read.csv("mmlu_pro/leaderboard_mmlu_pro_response_matrix_math.csv", stringsAsFactors = FALSE)$X)
print(head_models)
head -n 1 mmlu_pro/leaderboard_mmlu_pro_response_matrix_math.csv
score_response <- function(model_name, item_id) {
  # Read the data once
  response_data <- read.csv("mmlu_pro/leaderboard_mmlu_pro_response_matrix_math.csv", stringsAsFactors = FALSE, check.names = FALSE)
  
  # Find the row index for the model
  row_idx <- which(response_data$X == model_name)
  
  # Remove X prefix from item_id if it exists
  item_number <- gsub("^X", "", item_id)
  
  # Return the value at the intersection of model_name row and item_number column
  if (length(row_idx) > 0 && item_number %in% colnames(response_data)) {
    return(response_data[row_idx, item_number])
  } else {
    warning(paste("Could not find data for model", model_name, "and item", item_id, "/", item_number))
    return(NA)
  }
}

# Debug the CSV structure
print("Loading response matrix for debugging:")
response_data <- read.csv("mmlu_pro/leaderboard_mmlu_pro_response_matrix_math.csv", stringsAsFactors = FALSE, check.names = FALSE)
print("First few column names:")
print(head(colnames(response_data)))
print("Dimensions of the response matrix:")
print(dim(response_data))
print("First few model names:")
print(head(response_data$X))

# Test the function with a valid item ID from the dataset
print("Testing score_response function with a valid item ID:")
valid_item_id <- colnames(response_data)[2]  # First column after X should be a valid item ID
print(paste("Valid item ID from dataset:", valid_item_id))
print(score_response("qingy2024/Benchmaxx-Llama-3.2-1B-Instruct", valid_item_id))

score_response <- function(model_name, item_id) {
  # Read the data once
  response_data <- read.csv("mmlu_pro/leaderboard_mmlu_pro_response_matrix_math.csv", stringsAsFactors = FALSE, check.names = FALSE)
  
  # The first column has an empty name but contains model names
  # Extract the first column (model names)
  model_names <- response_data[[1]]
  
  # Find the row index for the model
  row_idx <- which(model_names == model_name)
  
  # Remove X prefix from item_id if it exists
  item_number <- gsub("^X", "", item_id)
  
  # Check if we found the model and if the item_id exists in columns
  if (length(row_idx) > 0 && item_number %in% colnames(response_data)) {
    return(response_data[row_idx, item_number])
  } else {
    warning(paste("Could not find data for model", model_name, "and item", item_id, "/", item_number))
    return(NA)
  }
}

# Debug the CSV structure
print("Loading response matrix for debugging:")
response_data <- read.csv("mmlu_pro/leaderboard_mmlu_pro_response_matrix_math.csv", stringsAsFactors = FALSE, check.names = FALSE)
print("First few column names:")
print(head(colnames(response_data)))
print("Dimensions of the response matrix:")
print(dim(response_data))
print("First few model names:")
print(head(response_data[[1]]))

# Test the function with a valid item ID from the dataset
print("Testing score_response function with a valid model and item ID:")
valid_item_id <- colnames(response_data)[2]  # First column after index is a valid item ID
valid_model <- response_data[[1]][1]  # First model in the dataset
print(paste("Valid item ID:", valid_item_id))
print(paste("Valid model name:", valid_model))
print("Response value:")
print(score_response(valid_model, valid_item_id))
